/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.intune.maven.cdependency;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.apache.maven.plugin.logging.Log;

/**
 *
 * @author paul.boyle
 */
public class ParseDepMakeFile {

    private Log logger;
    private String depMakeFile;
    private List<String> fileLines = null;
    private String relativeDir = null;

    public List<String> getFileLines() {
        return fileLines;
    }

    private Log getLog() {
        return logger;
    }

    private void createDependencyPreamble() {
        fileLines.add("##################################");
        fileLines.add("# MACHINE GENERATED CODE.       ##");
        fileLines.add("# Please do NOT edit this file. ##");
        fileLines.add("##################################");
        fileLines.add("ifndef CR1_ROOT_DIR");
        fileLines.add("$(ECHO) CR1_ROOT_DIR must be defined");
        fileLines.add("endif");
        fileLines.add("");
    }

    public boolean hasDependency(String dep) {

        boolean ret = false;
        if (fileLines == null) {
            ret = false;

        } else {
            Iterator<String> iter = fileLines.iterator();


            while (iter.hasNext()) {
                String line = iter.next();
                if (line.equals(dep)) {
                    ret = true;
                }

            }
        }

        return ret;
    }

    public void addDependency(String dep) {
        if (fileLines == null) {
            fileLines = new ArrayList<String>();

            createDependencyPreamble();

        }

        // Check to see if the dependency is already in the list
        Iterator<String> iter = fileLines.iterator();

        boolean found = false;
        while (iter.hasNext()) {
            String line = iter.next();

            String[] line_split = line.split(":=");
            String[] dep_split = dep.split(":=");


            if (line_split.length == 2 && dep_split.length == 2) {
                if (dep_split[0].equals(line_split[0])) {
                    getLog().debug("Already have this dependency: " + dep_split[0]);
                    // Replace
                    found = true;

                    fileLines.remove(line);
                    fileLines.add(dep);
                    break;
                }
            }

        }

        if (found == false) {
            fileLines.add(dep);
        }

    }

    public void printContents() {
        Iterator<String> iter = fileLines.iterator();

        while (iter.hasNext()) {
            String obj = iter.next();
            System.out.println(obj);
        }
    }

    public ParseDepMakeFile(String relativeDir, Log log, String depMakeFileName) {
        this.logger = log;
        if(relativeDir == null) {
            this.relativeDir = "";
        } else {
            this.relativeDir = relativeDir;        
        }           
        this.depMakeFile = depMakeFileName;
        readExisting_depMakeFile(relativeDir);

    }

    private void readExisting_depMakeFile(String property) {

        String filename = null;

        if (property != null) {
            getLog().debug("Got releative directory");

            filename = property + "/" + depMakeFile;

        } else {
            getLog().debug("Got no releative directory");
            filename = depMakeFile;
        }

        BufferedReader br = null;

        try {

            String sCurrentLine;

            br = new BufferedReader(new FileReader(filename));
            getLog().info("Updating depMakeFile.mk");

            while ((sCurrentLine = br.readLine()) != null) {
                if (fileLines == null) {
                    fileLines = new ArrayList<String>();
                }
                fileLines.add(sCurrentLine);
            }

        } catch (IOException e) {
            getLog().info("No existing depMakeFile.mk. Creating one.");
        } finally {

            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    public void writeDepMakeFile() {
        if (fileLines == null) {
            fileLines = new ArrayList<String>();

            createDependencyPreamble();

        }

        String fileName = "";
        if(relativeDir.length() > 1) {
            fileName = this.relativeDir + "/" + depMakeFile;
        } else {
            fileName = depMakeFile;
        }
        
        File file = new File(fileName);
        FileWriter fw;        try {
            fw = new FileWriter(file.getAbsoluteFile());
        } catch (IOException ex) {
            getLog().error("Error opening file: " + file.getAbsoluteFile());
            throw new Error("Error opening file");

        }

        BufferedWriter bw = new BufferedWriter(fw);
        try {
            Iterator<String> iter = fileLines.iterator();
            
            while(iter.hasNext()) {
                String obj = iter.next();
                 bw.write(obj + "\n");
            }

        } catch (IOException ex) {
            getLog().error("Error writing to file");
            throw new Error("Error writing to file");
        }
         
               try {
            bw.close();
        } catch (IOException ex) {
            getLog().error("Error closing file");
            throw new Error("Error on file close");
        }
    }
}
